/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2019-01-08 10:33:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsps;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ztreeCutAndCopy_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/zTree_v3/css/zTreeStyle/zTreeStyle.css\" type=\"text/css\">\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/zTree_v3/js/jquery-1.4.4.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/zTree_v3/js/jquery.ztree.core.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/zTree_v3/js/jquery.ztree.excheck.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/zTree_v3/js/jquery.ztree.exedit.js\"></script>\r\n");
      out.write("\t\t<SCRIPT type=\"text/javascript\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar setting = {\r\n");
      out.write("\t\t\tview: {\r\n");
      out.write("\t\t\t\tselectedMulti: false\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tedit: {\r\n");
      out.write("\t\t\t\tenable: true,\r\n");
      out.write("\t\t\t\tshowRemoveBtn: false,\r\n");
      out.write("\t\t\t\tshowRenameBtn: false\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tdata: {\r\n");
      out.write("\t\t\t\tsimpleData: {\r\n");
      out.write("\t\t\t\t\tenable: true,\r\n");
      out.write("\t\t\t\t\tidKey : \"id\",\r\n");
      out.write("\t\t\t\t\tpIdKey : \"pid\",\r\n");
      out.write("\t\t\t\t\trootPId : 0\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tkey:{\r\n");
      out.write("\t\t\t\t\tname : \"name\"\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tcallback: {\r\n");
      out.write("\t\t\t\tbeforeDrag: beforeDrag,\r\n");
      out.write("\t\t\t\tbeforeClick: beforeClick\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tasync: {\r\n");
      out.write("\t\t\t\tenable: true,\r\n");
      out.write("\t\t\t\turl: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/city/findcity\", \r\n");
      out.write("\t\t\t\ttype:\"get\",\r\n");
      out.write("\t\t\t\tautoParam: [\"id\"]\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\t\tfunction fontCss(treeNode) {\r\n");
      out.write("\t\t\tvar aObj = $(\"#\" + treeNode.tId + \"_a\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (treeNode === curSrcNode) {\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\taObj.addClass(curType);\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction beforeDrag(treeId, treeNodes) {\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction beforeClick(treeId, treeNode) {\r\n");
      out.write("\t\t\treturn !treeNode.isCur;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tvar curSrcNode, curType;\r\n");
      out.write("\t\tfunction setCurSrcNode(treeNode) {\r\n");
      out.write("\t\t\tvar zTree = $.fn.zTree.getZTreeObj(\"treeDemo\");\r\n");
      out.write("\t\t\tif (curSrcNode) {\r\n");
      out.write("\t\t\t\tdelete curSrcNode.isCur;\r\n");
      out.write("\t\t\t\tvar tmpNode = curSrcNode;\r\n");
      out.write("\t\t\t\tcurSrcNode = null;\r\n");
      out.write("\t\t\t\tfontCss(tmpNode);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tcurSrcNode = treeNode;\r\n");
      out.write("\t\t\tif (!treeNode) return;\r\n");
      out.write("\r\n");
      out.write("\t\t\tcurSrcNode.isCur = true;\t\t\t\r\n");
      out.write("\t\t\tzTree.cancelSelectedNode();\r\n");
      out.write("\t\t\tfontCss(curSrcNode);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction cut(e) {\r\n");
      out.write("\t\t\tvar zTree = $.fn.zTree.getZTreeObj(\"treeDemo\"),\r\n");
      out.write("\t\t\tnodes = zTree.getSelectedNodes();\r\n");
      out.write("\t\t\tif (nodes.length == 0) {\r\n");
      out.write("\t\t\t\talert(\"请先选择一个节点\");\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tcurType = \"cut\";\r\n");
      out.write("\t\t\tsetCurSrcNode(nodes[0]);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction paste(e) {\r\n");
      out.write("\t\t\tif (!curSrcNode) {\r\n");
      out.write("\t\t\t\talert(\"请先选择一个节点进行 复制 / 剪切\");\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar zTree = $.fn.zTree.getZTreeObj(\"treeDemo\"),\r\n");
      out.write("\t\t\tnodes = zTree.getSelectedNodes(),\r\n");
      out.write("\t\t\ttargetNode = nodes.length>0? nodes[0]:null;\r\n");
      out.write("\t\t\tif (curSrcNode === targetNode) {\r\n");
      out.write("\t\t\t\talert(\"不能移动，源节点 与 目标节点相同\");\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t} else if (curType === \"cut\" && ((!!targetNode && curSrcNode.parentTId === targetNode.tId) || (!targetNode && !curSrcNode.parentTId))) {\r\n");
      out.write("\t\t\t\talert(\"不能移动，源节点 已经存在于 目标节点中\");\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}  else if (curType === \"cut\") {\r\n");
      out.write("\t\t\t\ttargetNode = zTree.moveNode(targetNode, curSrcNode, \"inner\");\r\n");
      out.write("\t\t\t\tif (!targetNode) {\r\n");
      out.write("\t\t\t\t\talert(\"剪切失败，源节点是目标节点的父节点\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\ttargetNode = curSrcNode;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tsetCurSrcNode();\r\n");
      out.write("\t\t\tdelete targetNode.isCur;\r\n");
      out.write("\t\t\tzTree.selectNode(targetNode);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(document).ready(function(){\r\n");
      out.write("\t\t\t$.fn.zTree.init($(\"#treeDemo\"), setting);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#cut\").bind(\"click\", cut);\r\n");
      out.write("\t\t\t$(\"#paste\").bind(\"click\", paste);\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t</SCRIPT>\r\n");
      out.write("<!-- \t<style type=\"text/css\">\r\n");
      out.write(".ztree li a.copy{padding-top:0; background-color:#316AC5; color:white; border:1px #316AC5 solid;}\r\n");
      out.write(".ztree li a.cut{padding-top:0; background-color:silver; color:#111; border:1px #316AC5 dotted;}\r\n");
      out.write("\t</style> -->\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"content_wrap\">\r\n");
      out.write("\t<div class=\"zTreeDemoBackground left\">\r\n");
      out.write("\t\t<ul id=\"treeDemo\" class=\"ztree\"></ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"right\">\r\n");
      out.write("\t\t<ul class=\"info\">\r\n");
      out.write("\t\t\t<li><p>对节点进行 复制 / 剪切，试试看：<br/>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;[ <a id=\"cut\" href=\"#\" title=\"剪切\" onclick=\"return false;\">剪切</a> ]\r\n");
      out.write("\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;[ <a id=\"paste\" href=\"#\" title=\"粘贴\" onclick=\"return false;\">粘贴</a> ]</p>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
